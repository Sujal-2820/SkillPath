{
    "title": "JavaScript DOM Manipulation Made Simple",
    "content": [
      {
        "subheading": "What is the DOM?",
        "text": "The DOM, or Document Object Model, is a way that your web browser understands the structure of a webpage. It turns your HTML into a tree-like structure that JavaScript can work with. Each element on your page, like paragraphs, headings, and buttons, is a part of this tree.",
        "additional_text": "Think of the DOM as a big family tree. Each family member (HTML element) has connections (relationships) to others. JavaScript can move around this tree and make changes.",
        "quiz_questions": [
          {
            "question": "What does DOM stand for?",
            "options": ["Document Object Model", "Dynamic Object Model", "Data Output Model"],
            "correct_answer": "Document Object Model"
          }
        ]
      },
      {
        "subheading": "How to Select Elements",
        "text": "To change something on your webpage, you first need to select it. You can do this using JavaScript. The most common methods to select elements are `getElementById` and `querySelector`.",
        "code_example": [
          {
            "filename": "Selecting Elements",
            "code": "// Select a heading by its ID\nlet heading = document.getElementById('myHeading');\n\n// Select the first paragraph on the page\nlet firstParagraph = document.querySelector('p');"
          }
        ],
        "additional_text": "In this code, we select a heading with a specific ID and the first paragraph on the page. After selecting them, we can change their content or style.",
        "quiz_questions": [
          {
            "question": "Which method do you use to select an element by its ID?",
            "options": ["getElementById", "querySelector", "selectElement"],
            "correct_answer": "getElementById"
          }
        ]
      },
      {
        "subheading": "Changing Text Content",
        "text": "Once you have selected an element, you can change what it shows. You can use `innerHTML` to change what the element displays. If you only want to change the text without any HTML, you can use `textContent`.",
        "code_example": [
          {
            "filename": "Changing Text Content",
            "code": "// Change the text of the selected heading\nheading.innerHTML = 'Hello, World!';\n\n// Change the paragraph's text\nfirstParagraph.textContent = 'This is some new text.';"
          }
        ],
        "additional_text": "In this example, we change the heading to say 'Hello, World!' and update the paragraph with new text."
      },
      {
        "subheading": "Creating New Elements",
        "text": "You can also create new elements on your webpage. For example, you can add a new paragraph when a button is clicked.",
        "code_example": [
          {
            "filename": "Creating New Elements",
            "code": "// Create a new paragraph element\nlet newParagraph = document.createElement('p');\nnewParagraph.textContent = 'This is a new paragraph!';\n\n// Add the new paragraph to the body of the page\ndocument.body.appendChild(newParagraph);"
          }
        ],
        "additional_text": "Here, we create a new paragraph and add it to the end of the webpage. You can create all sorts of elements like divs, images, and lists!"
      },
      {
        "subheading": "Removing Elements",
        "text": "If you want to remove something from the webpage, you can do that too! You need to select the element first and then use `removeChild`.",
        "code_example": [
          {
            "filename": "Removing Elements",
            "code": "// Remove the first paragraph from the page\nlet paragraphToRemove = document.querySelector('p');\ndocument.body.removeChild(paragraphToRemove);"
          }
        ],
        "additional_text": "This code selects the first paragraph on the page and removes it. You can remove any element you want."
      },
      {
        "subheading": "Changing Styles",
        "text": "JavaScript can also change how elements look on the webpage. You can use the `style` property to change colors, sizes, and more.",
        "code_example": [
          {
            "filename": "Changing Styles",
            "code": "// Change the background color of the page\ndocument.body.style.backgroundColor = 'lightgreen';\n\n// Change the font size of the heading\nheading.style.fontSize = '36px';"
          }
        ],
        "additional_text": "With this code, we change the background color of the entire page to light green and increase the font size of the heading."
      },
      {
        "subheading": "Listening to Events",
        "text": "You can make your webpage interactive by responding to events. For example, you can show an alert when a button is clicked using `addEventListener`.",
        "code_example": [
          {
            "filename": "Listening to Events",
            "code": "// Select the button\nlet button = document.getElementById('myButton');\n\n// Add a click event to the button\nbutton.addEventListener('click', function() {\n  alert('You clicked the button!');\n});"
          }
        ],
        "additional_text": "This code shows an alert message when the button is clicked. You can respond to many types of events, like mouse movements or keyboard presses."
      },
      {
        "subheading": "Why is DOM Manipulation Important?",
        "text": "Learning DOM manipulation is essential because it lets you create dynamic and interactive websites. It gives you the ability to make changes on the fly, improving user experience and engagement."
      }
    ]
  }
  