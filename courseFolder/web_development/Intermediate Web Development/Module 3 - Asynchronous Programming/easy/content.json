{
    "title": "Exploring Asynchronous Programming in JavaScript",
    "content": [
      {
        "subheading": "What Is Asynchronous Programming?",
        "text": "Asynchronous programming allows JavaScript to perform tasks in the background without stopping other operations. This means you can request data, load images, or wait for a timer while still keeping the app responsive to user actions.",
        "additional_text": "Think of it like a restaurant where you order food (an asynchronous task) and while you wait for it to be prepared, you can chat with your friends (other code running).",
        "quiz_questions": [
          {
            "question": "What does asynchronous programming allow you to do?",
            "options": [
              "Stop all operations until a task is finished",
              "Run tasks in the background without blocking other code",
              "Make your code more complex"
            ],
            "correct_answer": "Run tasks in the background without blocking other code"
          }
        ]
      },
      {
        "subheading": "Using Callback Functions",
        "text": "A callback function is a function you pass to another function to be executed later. This is one of the simplest ways to handle asynchronous operations.",
        "code_example": [
          {
            "filename": "Example of Callback Function",
            "code": "function fetchData(callback) {\n  setTimeout(() => {\n    const data = 'Data received!';\n    callback(data);\n  }, 2000);\n}\n\nfetchData((result) => {\n  console.log(result);\n});"
          }
        ],
        "additional_text": "In this example, `fetchData` simulates getting data from a server after 2 seconds. The callback function logs the result once the data is ready."
      },
      {
        "subheading": "Introduction to Promises",
        "text": "Promises are a modern way to handle asynchronous operations. A promise represents a value that might not be available yet, but will be in the future.",
        "code_example": [
          {
            "filename": "Example of Promise",
            "code": "function fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true;\n      if (success) {\n        resolve('Data fetched successfully!');\n      } else {\n        reject('Error fetching data.');\n      }\n    }, 2000);\n  });\n}\n\nfetchData()\n  .then(result => console.log(result))\n  .catch(error => console.error(error));"
          }
        ],
        "additional_text": "Here, `fetchData` returns a promise. After 2 seconds, it either resolves (success) or rejects (error), allowing us to handle both scenarios using `.then()` and `.catch()`."
      },
      {
        "subheading": "Async/Await Makes It Easy",
        "text": "Async/await is a syntax that makes working with promises simpler and more readable. You declare a function as `async`, and use `await` to pause the execution until the promise is settled.",
        "code_example": [
          {
            "filename": "Using Async/Await",
            "code": "async function getData() {\n  try {\n    const result = await fetchData();\n    console.log(result);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ngetData();"
          }
        ],
        "additional_text": "In this example, `getData` is an asynchronous function that waits for `fetchData` to complete. If successful, it logs the result; if there's an error, it catches it."
      },
      {
        "subheading": "Error Handling in Asynchronous Code",
        "text": "Handling errors in asynchronous code is important. You can catch errors with `.catch()` for promises or use `try/catch` blocks in async functions.",
        "code_example": [
          {
            "filename": "Error Handling Example",
            "code": "async function fetchDataWithError() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Failed to fetch data'), 2000);\n  });\n}\n\nasync function handleData() {\n  try {\n    const data = await fetchDataWithError();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nhandleData();"
          }
        ],
        "additional_text": "This code demonstrates error handling. If `fetchDataWithError` fails, the error is caught in `handleData`, allowing us to respond gracefully."
      },
      {
        "subheading": "Making API Calls Asynchronously",
        "text": "Asynchronous programming is commonly used to make API calls. This allows web applications to fetch data without freezing the interface.",
        "code_example": [
          {
            "filename": "Making an API Call",
            "code": "async function getUserData() {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users/1');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('API Error:', error);\n  }\n}\n\ngetUserData();"
          }
        ],
        "additional_text": "In this function, we fetch user data from a mock API. The `fetch` method retrieves the data, and we convert it to JSON format before logging it."
      }
    ]
  }
  